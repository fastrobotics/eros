@startuml
title Common Window Class Diagram
package eros {
    class ArmDisarm
    class heartbeat <<(M,#FFFF00)>>
    class resource <<(M,#FFFF00)>>
    class loadfactor <<(M,#FFFF00)>>
}
namespace eros_window {
    interface IWindow #LimeGreen {
        +{abstract} std::string get_name()
        +{abstract} bool update(double dt, double t_ros_time)
        +{abstract} bool new_msg(eros::ArmDisarm::State armed_state)
        +{abstract} bool new_msg(eros::heartbeat heartbeat_msg)
        +{abstract} bool new_msg(eros::resource resource_msg)
        +{abstract} bool new_msg(eros::loadfactor loadfactor_msg)
        +{abstract} bool has_focus()
        +{abstract} void set_focused(bool cmd_focus)
        +{abstract} is_selectable()
        +{abstract} int16 get_tab_order
        +{abstract} int[] get_supported_keys()
        +{abstract} KeyEventContainer new_keyevent(int key)
    }
    abstract BaseWindow #LimeGreen {
        +std::string get_name()
        +bool has_focus()
        +set_focused(bool cmd_focus)
        +void set_screen_coordinates_pix(ScreenCoordinatePixel coord)
        +ScreenCoordinatePerc get_screen_coordinates_perc()
        +ScreenCoordinatePixel get_screen_coordinates_pixel()
        +string pretty()
        +void set_window(WINDOW win)
        +WINDOW get_window()
        +{abstract} bool update_window()
        +int get_tab_order()
        +void set_window_records_are_selectable(bool cmd)
        +bool get_window_records_are_selectable()
        +int16 get_selected_record()
        +int[] get_supported_keys()

    }
    IWindow <|.. BaseWindow
    class HeaderWindow #LimeGreen {
        +bool is_selectable()
        +bool update(double dt, double t_ros_time)
        +bool new_msg(eros::ArmDisarm::State armed_state)
        +bool new_msg(eros::heartbeat heartbeat_msg) // NO-OP
        +bool new_msg(eros::resource resource_msg) // NO-OP
        +bool new_msg(eros::loadfactor loadfactor_msg) // NO-OP
        +bool new_msg(eros::command_state command_state_msg) // NO-OP
        +KeyEventContainer new_keyevent(int key) // NO-OP
        +bool new_command(WindowCommand[] commands) // NO-OP
        -bool update_window()

    }
    BaseWindow <|-- HeaderWindow
    class DiagnosticsWindow #LimeGreen {
        +bool is_selectable()
        +bool update(double dt, double t_ros_time)
        +bool new_msg(eros::ArmDisarm::State armed_state) // NO-OP
        +bool new_msg(eros::heartbeat heartbeat_msg)
        +bool new_msg(eros::resource resource_msg)
        +bool new_msg(eros::loadfactor loadfactor_msg) // NO-OP
        +bool new_msg(eros::command_state command_state_msg) // NO-OP
        +KeyEventContainer new_keyevent(int key) // NO-OP
        +bool new_command(WindowCommand[] commands)
        -bool update_window()
        
    }
    BaseWindow <|-- DiagnosticsWindow
    class StatusWindow #LimeGreen {
        +bool is_selectable()
        +bool update(double dt, double t_ros_time)
        +bool new_msg(eros::ArmDisarm::State armed_state) // NO-OP
        +bool new_msg(eros::heartbeat heartbeat_msg) // NO-OP
        +bool new_msg(eros::resource resource_msg) // NO-OP
        +bool new_msg(eros::loadfactor loadfactor_msg) // NO-OP
        +bool new_msg(eros::command_state command_state_msg) // NO-OP
        +KeyEventContainer new_keyevent(int key) // NO-OP
        +bool new_command(WindowCommand[] commands) // NO-OP
        -bool update_window()
        
    }
    BaseWindow <|-- StatusWindow
    class MessageWindow #LimeGreen {
        +bool is_selectable()
        +bool update(double dt, double t_ros_time)
        +bool new_msg(eros::command_state command_sate)
        +bool new_msg(eros::ArmDisarm::State armed_state) // NO-OP
        +bool new_msg(eros::heartbeat heartbeat_msg) // NO-OP
        +bool new_msg(eros::resource resource_msg) // NO-OP
        +bool new_msg(eros::loadfactor loadfactor_msg) // NO-OP
        +KeyEventContainer new_keyevent(int key) // NO-OP
        +bool new_MessageTextList(MessageTest[] messages)
        +bool new_command(WindowCommand[] commands) // NO-OP
        -bool update_window()
        
    }
    BaseWindow <|-- MessageWindow
}
@enduml